# Batch Job Example
#
# This example demonstrates using the FastestEmptyNode scheduler with a CronJob
# for regular batch processing. The job runs every 15 minutes and processes
# data for 10 minutes, showing how the scheduler handles recurring workloads.
#
# Usage:
#   kubectl apply -f batch-job.yaml
#   kubectl get cronjobs  # See the schedule
#   kubectl get jobs  # See job instances
#   kubectl get pods -l app=batch-processor -o wide  # See scheduling

apiVersion: batch/v1
kind: CronJob
metadata:
  name: batch-processor
  labels:
    app: scheduler-example
    example: batch-job
  annotations:
    description: "Recurring batch job using FastestEmptyNode scheduler"
spec:
  # Run every 15 minutes
  schedule: "*/15 * * * *"
  
  # Keep last 3 successful and 1 failed job
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  
  # Don't start new job if previous one is still running
  concurrencyPolicy: Forbid
  
  # Start job within 60 seconds of scheduled time
  startingDeadlineSeconds: 60
  
  jobTemplate:
    metadata:
      labels:
        app: scheduler-example
        example: batch-job
    spec:
      # Job must complete within 12 minutes (buffer for scheduling)
      activeDeadlineSeconds: 720
      
      # Clean up completed job after 5 minutes
      ttlSecondsAfterFinished: 300
      
      template:
        metadata:
          labels:
            app: batch-processor
            example: batch-job
          annotations:
            # REQUIRED: Expected processing duration (10 minutes)
            job-duration.example.com/seconds: "600"
        spec:
          # REQUIRED: Use our custom scheduler
          schedulerName: fastest-empty-node-scheduler
          
          restartPolicy: Never
          
          containers:
          - name: processor
            image: busybox:1.36
            
            command: ["/bin/sh"]
            args:
            - -c
            - |
              echo "========================================="
              echo "Batch Processor Starting"
              echo "Time: $(date)"
              echo "Node: $NODE_NAME"
              echo "Job: $JOB_NAME"
              echo "Expected Duration: 600 seconds (10 minutes)"
              echo "========================================="
              
              # Simulate batch processing phases
              echo "Phase 1: Data Ingestion (2 minutes)"
              for i in $(seq 1 12); do
                echo "  Ingesting batch $i/12 ($(date))"
                sleep 10
              done
              
              echo "Phase 2: Data Processing (6 minutes)"
              for i in $(seq 1 36); do
                echo "  Processing record set $i/36 ($(date))"
                sleep 10
              done
              
              echo "Phase 3: Data Export (2 minutes)"
              for i in $(seq 1 12); do
                echo "  Exporting results $i/12 ($(date))"
                sleep 10
              done
              
              echo "========================================="
              echo "Batch Processing Completed Successfully"
              echo "Time: $(date)"
              echo "Total Duration: 600 seconds"
              echo "========================================="
            
            # Higher resource requirements for batch processing
            resources:
              requests:
                cpu: "500m"        # 0.5 CPU core
                memory: "256Mi"    # 256 MB memory
              limits:
                cpu: "1000m"       # Max 1 CPU core
                memory: "512Mi"    # Max 512 MB memory
            
            # Environment variables
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['job-name']
            - name: BATCH_SIZE
              value: "1000"
            - name: PROCESSING_MODE
              value: "optimized"
          
          # Prefer nodes with sufficient CPU for batch processing
          nodeSelector:
            kubernetes.io/os: linux
          
          # Tolerate batch processing taints
          tolerations:
          - key: batch-workloads
            operator: Equal
            value: "true"
            effect: NoSchedule
          - key: node.kubernetes.io/not-ready
            operator: Exists
            effect: NoExecute
            tolerationSeconds: 300

---
# Optional: Service Monitor for Prometheus (if using monitoring)
apiVersion: v1
kind: ConfigMap
metadata:
  name: batch-processor-config
  labels:
    app: scheduler-example
    example: batch-job
data:
  processing-config.yaml: |
    batch:
      size: 1000
      timeout: 600s
      retries: 3
    
    scheduler:
      name: fastest-empty-node-scheduler
      expected_duration: 600
      
    logging:
      level: info
      format: json
