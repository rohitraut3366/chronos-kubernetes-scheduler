{{- if .Values.tests.enabled }}
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "fastest-empty-node-scheduler.fullname" . }}-test"
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "fastest-empty-node-scheduler.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  serviceAccountName: {{ include "fastest-empty-node-scheduler.serviceAccountName" . }}
  containers:
  - name: test-scheduler
    image: "{{ .Values.tests.image.repository }}:{{ .Values.tests.image.tag }}"
    imagePullPolicy: {{ .Values.tests.image.pullPolicy }}
    command:
    - /bin/sh
    - -c
    - |
      set -e
      
      echo "üß™ Testing FastestEmptyNode Scheduler..."
      
      # Test 1: Check if scheduler deployment is running
      echo "Test 1: Checking scheduler deployment..."
      if kubectl get deployment {{ include "fastest-empty-node-scheduler.fullname" . }} -n {{ .Release.Namespace }} | grep -q "1/1"; then
        echo "‚úÖ Scheduler deployment is running"
      else
        echo "‚ùå Scheduler deployment is not ready"
        exit 1
      fi
      
      # Test 2: Check if scheduler pod is ready
      echo "Test 2: Checking scheduler pod readiness..."
      if kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/name={{ include "fastest-empty-node-scheduler.name" . }} | grep -q "1/1.*Running"; then
        echo "‚úÖ Scheduler pod is ready and running"
      else
        echo "‚ùå Scheduler pod is not ready"
        kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/name={{ include "fastest-empty-node-scheduler.name" . }}
        exit 1
      fi
      
      # Test 3: Check scheduler configuration
      echo "Test 3: Checking scheduler configuration..."
      if kubectl get configmap {{ include "fastest-empty-node-scheduler.fullname" . }}-config -n {{ .Release.Namespace }} -o yaml | grep -q "schedulerName: {{ .Values.scheduler.name }}"; then
        echo "‚úÖ Scheduler configuration is correct"
      else
        echo "‚ùå Scheduler configuration is incorrect"
        exit 1
      fi
      
      # Test 4: Test basic scheduling with a test pod
      echo "Test 4: Testing pod scheduling..."
      cat << 'EOF' | kubectl apply -f -
      apiVersion: v1
      kind: Pod
      metadata:
        name: scheduler-test-pod
        namespace: {{ .Release.Namespace }}
        annotations:
          scheduling.workload.io/expected-duration-seconds: "60"
      spec:
        schedulerName: {{ .Values.scheduler.name }}
        restartPolicy: Never
        containers:
        - name: test
          image: busybox:1.36
          command: ["sleep", "10"]
          resources:
            requests:
              cpu: "10m"
              memory: "16Mi"
      EOF
      
      # Wait for pod to be scheduled
      echo "Waiting for test pod to be scheduled..."
      for i in {1..30}; do
        if kubectl get pod scheduler-test-pod -n {{ .Release.Namespace }} | grep -q "Running\|Completed"; then
          echo "‚úÖ Test pod was successfully scheduled"
          NODE=$(kubectl get pod scheduler-test-pod -n {{ .Release.Namespace }} -o jsonpath='{.spec.nodeName}')
          echo "‚úÖ Pod scheduled on node: $NODE"
          break
        fi
        if kubectl get pod scheduler-test-pod -n {{ .Release.Namespace }} | grep -q "Pending"; then
          echo "Pod is still pending... (attempt $i/30)"
          sleep 2
        else
          echo "‚ùå Pod scheduling failed"
          kubectl describe pod scheduler-test-pod -n {{ .Release.Namespace }}
          exit 1
        fi
      done
      
      # Clean up test pod
      kubectl delete pod scheduler-test-pod -n {{ .Release.Namespace }} --ignore-not-found
      
      {{- if .Values.metrics.enabled }}
      # Test 5: Check if metrics endpoint is accessible
      echo "Test 5: Checking metrics endpoint..."
      SCHEDULER_POD=$(kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/name={{ include "fastest-empty-node-scheduler.name" . }} -o jsonpath='{.items[0].metadata.name}')
      if kubectl exec -n {{ .Release.Namespace }} $SCHEDULER_POD -- wget -q --no-check-certificate --timeout=5 -O - https://localhost:{{ .Values.metrics.port }}/metrics | grep -q "scheduler"; then
        echo "‚úÖ Metrics endpoint is accessible"
      else
        echo "‚ùå Metrics endpoint is not accessible"
        exit 1
      fi
      {{- end }}
      
      echo ""
      echo "üéâ All scheduler tests passed successfully!"
      echo "‚úÖ FastestEmptyNode scheduler is working correctly"
    
    resources:
      requests:
        cpu: 10m
        memory: 16Mi
      limits:
        cpu: 100m
        memory: 64Mi
{{- end }}
