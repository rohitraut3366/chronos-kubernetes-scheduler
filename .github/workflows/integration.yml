name: Integration Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
  # Allow manual triggering
  workflow_dispatch:

# Cancel old workflows when new commits are pushed to the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  GO_VERSION: '1.22'

jobs:
  integration-test:
    name: Full Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Helm
      run: |
        # Install Helm directly without needing GitHub token
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        rm get_helm.sh

    - name: Set up K3s cluster
      run: |
        # Install K3s
        curl -sfL https://get.k3s.io | sh -s - \
          --write-kubeconfig-mode 644 \
          --disable traefik \
          --disable servicelb \
          --disable metrics-server

        # Wait for K3s to be ready
        sudo chmod 644 /etc/rancher/k3s/k3s.yaml
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        
        # Wait for node to be ready
        timeout 60s bash -c 'until kubectl get nodes | grep -q Ready; do sleep 5; done'
        
        kubectl cluster-info
        kubectl get nodes -o wide

    - name: Build and import Docker image
      run: |
        # Build image
        echo "🔨 Building Docker image..."
        make docker-build
        
        # Verify local build
        docker images | grep chronos-kubernetes-scheduler
        
        # Tag for integration tests with dummy registry
        echo "🏷️ Tagging image for integration tests..."
        docker tag chronos-kubernetes-scheduler:latest dummy/chronos-kubernetes-scheduler:integration-test
        
        # Import into K3s with better error handling
        echo "📦 Importing image into K3s..."
        docker save dummy/chronos-kubernetes-scheduler:integration-test | sudo k3s ctr images import -
        
        # Verify import worked
        echo "✅ Verifying image import..."
        sudo k3s ctr images list | grep chronos-kubernetes-scheduler || {
          echo "❌ Image import failed!"
          echo "Available K3s images:"
          sudo k3s ctr images list
          exit 1
        }
        
        echo "🎉 Image successfully imported to K3s!"

    - name: Deploy Chronos scheduler
      run: |
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        
        # Create namespace
        kubectl create namespace chronos-system
        
        # Create integration test values
        cat > values-ci.yaml << 'HELM_VALUES'
        replicaCount: 1
        
        image:
          registry: dummy
          repository: chronos-kubernetes-scheduler  
          tag: "integration-test"
          pullPolicy: Never
        
        scheduler:
          name: chronos-kubernetes-scheduler
          leaderElection:
            enabled: false  # Single replica in CI
        
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        
        logLevel: 4  # Debug logging
        
        # Add tolerations for any taints
        tolerations:
        - operator: Exists
        
        # Simplified security context for CI
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
        HELM_VALUES
        
        # Debug before installation
        echo "=== DEBUGGING BEFORE HELM INSTALL ==="
        echo "Kubernetes cluster info:"
        kubectl cluster-info
        echo "Nodes:"
        kubectl get nodes -o wide
        echo "Available images in K3s:"
        sudo k3s ctr images list | grep -E "(chronos|scheduler)" || echo "No scheduler images found"
        echo "Helm values file:"
        cat values-ci.yaml
        echo "Chart templates dry-run:"
        helm template chronos-scheduler ./charts/chronos-kubernetes-scheduler --values values-ci.yaml --namespace chronos-system || {
          echo "❌ Helm template validation failed!"
          exit 1
        }
        
        # Install Helm chart with detailed logging
        echo "🚀 Installing Helm chart..."
        helm upgrade --install chronos-scheduler \
          ./charts/chronos-kubernetes-scheduler \
          --namespace chronos-system \
          --values values-ci.yaml \
          --wait \
          --timeout 5m \
          --debug || {
          echo "❌ Helm installation failed!"
          echo "Helm status:"
          helm status chronos-scheduler -n chronos-system || true
          echo "Pod events:"
          kubectl get events -n chronos-system --sort-by='.lastTimestamp' || true
          exit 1
        }
        
        # Wait for scheduler pod to be ready
        echo "⏳ Waiting for scheduler pod to be ready..."
        
        # First check all pods to see what labels exist
        echo "Debug: All pods in chronos-system:"
        kubectl get pods -n chronos-system --show-labels
        
        # Wait for any pod in the namespace to be ready (more reliable for single deployment)
        kubectl wait --for=condition=Ready pod --all -n chronos-system --timeout=180s || {
          echo "❌ Scheduler pod failed to become ready!"
          echo "Pod status:"
          kubectl get pods -n chronos-system -o wide
          echo "Pod describe:"
          kubectl describe pods -n chronos-system
          echo "Pod logs:"
          kubectl logs -n chronos-system -l app.kubernetes.io/name=chronos-kubernetes-scheduler --tail=50 || true
          exit 1
        }
        
        # Show scheduler status
        echo "✅ Scheduler pod is ready!"
        kubectl get pods -n chronos-system -o wide
        kubectl logs -n chronos-system -l app.kubernetes.io/name=chronos-kubernetes-scheduler --tail=20

    - name: Run integration tests
      run: |
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        
        # Create test namespace
        kubectl create namespace integration-test
        
        # Create test pods
        cat > integration-test-pods.yaml << 'TEST_PODS'
        apiVersion: v1
        kind: Pod
        metadata:
          name: test-short-job
          namespace: integration-test
          annotations:
            scheduling.workload.io/expected-duration-seconds: "60"
        spec:
          schedulerName: chronos-kubernetes-scheduler
          containers:
          - name: worker
            image: alpine:latest
            command: ["sh", "-c", "echo 'Short job starting'; sleep 60; echo 'Short job completed'"]
          restartPolicy: Never
        
        ---
        apiVersion: v1
        kind: Pod
        metadata:
          name: test-decimal-duration
          namespace: integration-test
          annotations:
            scheduling.workload.io/expected-duration-seconds: "120.5"
        spec:
          schedulerName: chronos-kubernetes-scheduler
          containers:
          - name: worker
            image: busybox:latest
            command: ["sh", "-c", "echo 'Decimal duration job'; sleep 120; echo 'Completed'"]
          restartPolicy: Never
        
        ---
        apiVersion: v1
        kind: Pod
        metadata:
          name: test-no-annotation
          namespace: integration-test
        spec:
          schedulerName: chronos-kubernetes-scheduler
          containers:
          - name: worker
            image: nginx:alpine
            command: ["sh", "-c", "echo 'No annotation job'; sleep 30; echo 'Completed'"]
          restartPolicy: Never
        TEST_PODS
        
        # Apply test pods
        kubectl apply -f integration-test-pods.yaml
        
        # Wait for pods to be scheduled
        sleep 15
        
        # Check results
        echo "=== POD SCHEDULING RESULTS ==="
        kubectl get pods -n integration-test -o wide
        
        echo "=== SCHEDULER LOGS ==="
        kubectl logs -n chronos-system -l app.kubernetes.io/name=chronos-kubernetes-scheduler --tail=50
        
        echo "=== SCHEDULING EVENTS ==="
        kubectl get events -n integration-test --field-selector reason=Scheduled
        
        echo "=== FAILED SCHEDULING EVENTS ==="  
        kubectl get events -n integration-test --field-selector reason=FailedScheduling

    - name: Validate scheduling correctness
      run: |
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        
        # Check that pods were scheduled by Chronos
        CHRONOS_PODS=$(kubectl get pods -n integration-test -o jsonpath='{.items[?(@.spec.schedulerName=="chronos-kubernetes-scheduler")].metadata.name}' | wc -w)
        TOTAL_PODS=$(kubectl get pods -n integration-test --no-headers | wc -l)
        
        echo "Pods scheduled by Chronos: $CHRONOS_PODS/$TOTAL_PODS"
        
        if [ "$CHRONOS_PODS" -eq "$TOTAL_PODS" ]; then
          echo "✅ SUCCESS: All pods scheduled by Chronos"
        else
          echo "❌ FAILURE: Not all pods scheduled by Chronos"
          exit 1
        fi
        
        # Check that scheduler is processing annotations
        LOGS_WITH_SCORING=$(kubectl logs -n chronos-system -l app.kubernetes.io/name=chronos-kubernetes-scheduler | grep -c "Score.*optimized" || echo "0")
        
        echo "Scheduler scoring operations found: $LOGS_WITH_SCORING"
        
        if [ "$LOGS_WITH_SCORING" -gt 0 ]; then
          echo "✅ SUCCESS: Scheduler processing duration annotations"
        else
          echo "⚠️  WARNING: No scoring operations found in logs"
        fi
        
        # Check for any failed scheduling
        FAILED_EVENTS=$(kubectl get events -n integration-test --field-selector reason=FailedScheduling --no-headers | wc -l)
        
        if [ "$FAILED_EVENTS" -eq 0 ]; then
          echo "✅ SUCCESS: No failed scheduling events"
        else
          echo "❌ FAILURE: $FAILED_EVENTS failed scheduling events found"
          kubectl get events -n integration-test --field-selector reason=FailedScheduling
          exit 1
        fi

    - name: Run scheduler analysis
      if: always()
      run: |
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        
        # Run our comprehensive analyzer
        if [ -f "./chronos-analyzer.sh" ]; then
          echo "=== COMPREHENSIVE SCHEDULER ANALYSIS ==="
          ./chronos-analyzer.sh integration-test chronos-system || true
        fi

    - name: Upload integration test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          values-ci.yaml
          integration-test-pods.yaml
        retention-days: 7

    - name: Cleanup
      if: always()
      run: |
        # Show final status
        export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        kubectl get pods -A || true
        
        # K3s cleanup happens automatically when runner terminates
