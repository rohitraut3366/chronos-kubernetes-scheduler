name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # Allow manual triggering
  workflow_dispatch:

env:
  GO_VERSION: '1.22'

jobs:
  # Run code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Format check
      run: |
        make fmt
        if ! git diff --quiet; then
          echo "Code is not properly formatted. Please run 'make fmt'"
          git diff
          exit 1
        fi

    - name: Vet check
      run: make vet

    - name: Install golangci-lint
      run: make install-tools

    - name: Lint check
      run: make lint

  # Run unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Run unit tests
      run: make test-unit

    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          coverage.out
        retention-days: 30

  # Run integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Run integration tests
      run: make test-integration

  # Run full test suite with coverage
  full-tests:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Run all tests with coverage
      run: make coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage results
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
        retention-days: 30

  # Build binary to ensure it compiles
  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: [quality]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Build binary
      run: make build

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: scheduler-binary
        path: bin/chronos-kubernetes-scheduler
        retention-days: 30

  # Build Docker image to ensure it works
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: make docker-build

    - name: Test Docker image
      run: |
        # Basic smoke test - ensure container starts and exits gracefully
        timeout 10s docker run --rm chronos-kubernetes-scheduler:latest --help || true

  # Run benchmarks to detect performance regressions
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Run benchmarks
      run: make bench > benchmarks.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmarks.txt
        retention-days: 30

    - name: Comment benchmark results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const benchmarks = fs.readFileSync('benchmarks.txt', 'utf8');
            const comment = `## ðŸ“ˆ Benchmark Results\n\n\`\`\`\n${benchmarks}\n\`\`\``;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not post benchmark results:', error);
          }

  # Validate Kubernetes manifests
  validate-k8s:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Validate deployment manifests
      run: |
        kubectl --dry-run=client --validate=true apply -f deploy/manifests.yaml

    - name: Validate example manifests
      run: |
        for file in examples/*.yaml; do
          echo "Validating $file"
          kubectl --dry-run=client --validate=true apply -f "$file"
        done

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

    - name: Scan Docker image for vulnerabilities
      if: always()
      run: |
        # Build image first
        make docker-build
        
        # Install Trivy for vulnerability scanning
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy
        
        # Scan the built image
        trivy image --exit-code 0 --severity HIGH,CRITICAL chronos-kubernetes-scheduler:latest

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests, full-tests, build, docker-build, validate-k8s, security]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.quality.result }}" != "success" ]]; then
          echo "Quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "Unit tests failed"
          exit 1
        fi
        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "Integration tests failed"
          exit 1
        fi
        if [[ "${{ needs.full-tests.result }}" != "success" ]]; then
          echo "Full test suite failed"
          exit 1
        fi
        if [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "Build failed"
          exit 1
        fi
        if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "Docker build failed"
          exit 1
        fi
        if [[ "${{ needs.validate-k8s.result }}" != "success" ]]; then
          echo "Kubernetes validation failed"
          exit 1
        fi
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "Security scan failed"
          exit 1
        fi
        echo "âœ… All CI checks passed!"
