name: Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:  # Run on all PRs regardless of target branch
  # Allow manual triggering
  workflow_dispatch:

# Cancel old workflows when new commits are pushed to the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  GO_VERSION: '1.22'

jobs:
  # Run code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-
      continue-on-error: true

    - name: Download dependencies
      run: make deps

    - name: Format check
      run: |
        make fmt
        if ! git diff --quiet; then
          echo "Code is not properly formatted. Please run 'make fmt'"
          git diff
          exit 1
        fi

    - name: Vet check
      run: make vet

    - name: Install golangci-lint
      run: make install-tools

    - name: Lint check
      run: make lint

  # Run unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-
      continue-on-error: true

    - name: Download dependencies
      run: make deps

    - name: Run unit tests
      run: make test-unit

    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          coverage.out
        retention-days: 30

  # Run Go-based integration tests (unit-style)
  go-integration-tests:
    name: Go Integration Tests
    runs-on: ubuntu-latest
    needs: [quality]  # Reuse quality job's setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-
      continue-on-error: true

    - name: Download dependencies
      run: make deps

    - name: Run Go integration tests
      run: make test-integration

  # Build Docker image and run security scanning
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [quality]
    permissions:
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: make docker-build

    - name: Test Docker image
      run: |
        # Basic smoke test - ensure container starts and exits gracefully
        timeout 10s docker run --rm chronos-kubernetes-scheduler:latest --help || true

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    - name: Run Trivy vulnerability scanner
      run: |
        # Scan for HIGH and CRITICAL vulnerabilities
        trivy image --format sarif --output trivy-results.sarif chronos-kubernetes-scheduler:latest
        
        # Also create a table format for human reading
        trivy image --severity HIGH,CRITICAL chronos-kubernetes-scheduler:latest

    - name: Upload Trivy SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
        category: trivy

    - name: Upload Trivy results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: trivy-results.sarif
        retention-days: 30

  # Run benchmarks to detect performance regressions
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-
      continue-on-error: true

    - name: Download dependencies
      run: make deps

    - name: Run benchmarks
      run: make bench > benchmarks.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmarks.txt
        retention-days: 5

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, go-integration-tests, docker-build]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.quality.result }}" != "success" ]]; then
          echo "Quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "Unit tests failed"
          exit 1
        fi
        if [[ "${{ needs.go-integration-tests.result }}" != "success" ]]; then
          echo "Go integration tests failed"
          exit 1
        fi

        if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "Docker build failed"
          exit 1
        fi

        echo "âœ… All CI checks passed!"
