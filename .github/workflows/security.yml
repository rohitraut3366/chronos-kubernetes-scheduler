name: Security Scan

on:
  # Run security scans on pushes to main
  push:
    branches: [ main ]
  # Run security scans on PRs (lighter scan)
  pull_request:
  # Run weekly security scans
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  # Allow manual triggering
  workflow_dispatch:

env:
  GO_VERSION: '1.22'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Go security scanning with gosec
  gosec:
    name: Go Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Run Gosec Security Scanner
      run: |
        # Install gosec
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        # Run gosec scan with SARIF output
        gosec -fmt sarif -out gosec-results.sarif -exclude-dir=.git -exclude-generated ./...

    - name: Upload Gosec SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec-results.sarif
        category: gosec

    - name: Upload Gosec results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: gosec-results
        path: gosec-results.sarif
        retention-days: 30

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: make deps

    - name: Run Nancy dependency scanner
      run: |
        # Install Nancy for dependency vulnerability scanning
        go install github.com/sonatypecommunity/nancy@latest
        
        # Generate dependencies list and scan (report findings but don't fail)
        echo "🔍 Scanning dependencies for vulnerabilities..."
        go list -json -deps ./... | nancy sleuth || echo "⚠️ Nancy found potential dependency issues - review the output above"
      continue-on-error: true

    - name: Run govulncheck
      run: |
        # Install govulncheck - official Go vulnerability scanner
        go install golang.org/x/vuln/cmd/govulncheck@latest
        
        # Run vulnerability check (report findings but don't fail on standard library usage)
        echo "🔍 Scanning for Go vulnerabilities..."
        govulncheck ./... || echo "⚠️ govulncheck found potential issues - review the output above"
      continue-on-error: true

  # CodeQL analysis for additional security insights
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['go']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build project for CodeQL
      run: |
        make deps
        make build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"






  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [gosec, dependency-scan, codeql]
    if: always()
    steps:
    - name: Create security summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        # 🛡️ Security Scan Results
        
        ## Scan Status
        | Scanner | Status |
        |---------|--------|
        | Gosec (Go Security) | ${{ needs.gosec.result == 'success' && '✅ Passed' || '❌ Failed' }} |
        | Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |
        | CodeQL Analysis | ${{ needs.codeql.result == 'success' && '✅ Passed' || '❌ Failed' }} |
        | Docker Image Scan | ✅ Moved to test.yml workflow |
        
        ## Next Steps
        - Review any failed scans in the workflow logs
        - Check uploaded SARIF files for detailed vulnerability information
        - Docker image security scanning results are available in the test.yml workflow
        
        ## Security Artifacts
        Security scan results are uploaded as workflow artifacts and available for download.
        Docker image scan results are available in the test.yml workflow artifacts.
        EOF

    - name: Check overall security status
      run: |
        FAILURES=""
        
        if [[ "${{ needs.gosec.result }}" != "success" ]]; then
          FAILURES="$FAILURES gosec"
        fi
        
        if [[ -n "$FAILURES" ]]; then
          echo "❌ Security scan failures detected in: $FAILURES"
          echo "Please review the failed scans and address any critical security issues."
          # Don't fail the workflow for security issues - just report them
        else
          echo "✅ All critical security scans passed!"
        fi
