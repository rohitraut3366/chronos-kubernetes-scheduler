name: Security Scan

on:
  # Run security scans on pushes to main
  push:
    branches: [ main ]
  # Run security scans on PRs (lighter scan)
  pull_request:
  # Run weekly security scans
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  # Allow manual triggering
  workflow_dispatch:

env:
  GO_VERSION: '1.22'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Go security scanning with gosec
  gosec:
    name: Go Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Run Gosec Security Scanner
      run: |
        # Install gosec
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        # Run gosec scan with SARIF output
        gosec -fmt sarif -out gosec-results.sarif -exclude-dir=.git -exclude-generated ./...

    - name: Upload Gosec SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec-results.sarif
        category: gosec

    - name: Upload Gosec results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: gosec-results
        path: gosec-results.sarif
        retention-days: 30

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: make deps

    - name: Run Nancy dependency scanner
      run: |
        # Install Nancy for dependency vulnerability scanning
        go install github.com/sonatypecommunity/nancy@latest
        
        # Generate dependencies list
        go list -json -deps ./... | nancy sleuth
      continue-on-error: true

    - name: Run govulncheck
      run: |
        # Install govulncheck - official Go vulnerability scanner
        go install golang.org/x/vuln/cmd/govulncheck@latest
        
        # Run vulnerability check
        govulncheck ./...

  # Docker image vulnerability scanning
  docker-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: make docker-build

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    - name: Run Trivy vulnerability scanner
      run: |
        # Scan for HIGH and CRITICAL vulnerabilities
        trivy image --format sarif --output trivy-results.sarif chronos-kubernetes-scheduler:latest
        
        # Also create a table format for human reading
        trivy image --severity HIGH,CRITICAL chronos-kubernetes-scheduler:latest

    - name: Upload Trivy SARIF results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif
        category: trivy

    - name: Upload Trivy results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: trivy-results.sarif
        retention-days: 30

  # CodeQL analysis for additional security insights
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['go']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build project for CodeQL
      run: |
        make deps
        make build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"




  # SBOM (Software Bill of Materials) generation
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: make deps

    - name: Install syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Generate SBOM for source code
      run: |
        syft packages . -o spdx-json=sbom-source.spdx.json
        syft packages . -o table=sbom-source.txt

    - name: Build Docker image for SBOM
      run: make docker-build

    - name: Generate SBOM for Docker image
      run: |
        syft packages chronos-kubernetes-scheduler:latest -o spdx-json=sbom-docker.spdx.json
        syft packages chronos-kubernetes-scheduler:latest -o table=sbom-docker.txt

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-reports
        path: |
          sbom-*.spdx.json
          sbom-*.txt
        retention-days: 30

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [gosec, dependency-scan, docker-scan, codeql, sbom]
    if: always()
    steps:
    - name: Create security summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        # 🛡️ Security Scan Results
        
        ## Scan Status
        | Scanner | Status |
        |---------|--------|
        | Gosec (Go Security) | ${{ needs.gosec.result == 'success' && '✅ Passed' || '❌ Failed' }} |
        | Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |
        | Docker Image Scan | ${{ needs.docker-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |
        | CodeQL Analysis | ${{ needs.codeql.result == 'success' && '✅ Passed' || '❌ Failed' }} |
        | SBOM Generation | ${{ needs.sbom.result == 'success' && '✅ Generated' || '❌ Failed' }} |
        
        ## Next Steps
        - Review any failed scans in the workflow logs
        - Check uploaded SARIF files for detailed vulnerability information
        - Use SBOM files for supply chain security analysis
        
        ## Security Artifacts
        All security scan results are uploaded as workflow artifacts and available for download.
        EOF

    - name: Check overall security status
      run: |
        FAILURES=""
        
        if [[ "${{ needs.gosec.result }}" != "success" ]]; then
          FAILURES="$FAILURES gosec"
        fi
        if [[ "${{ needs.docker-scan.result }}" != "success" ]]; then
          FAILURES="$FAILURES docker-scan"
        fi
        
        if [[ -n "$FAILURES" ]]; then
          echo "❌ Security scan failures detected in: $FAILURES"
          echo "Please review the failed scans and address any critical security issues."
          # Don't fail the workflow for security issues - just report them
        else
          echo "✅ All critical security scans passed!"
        fi
