name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on semantic version tags (v1.0.0, v1.2.3, etc.)

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag format
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "Tag: $TAG"
          
          # Validate semantic versioning
          if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid tag format: $TAG"
            echo "Expected format: v1.2.3 or v1.2.3-alpha1"
            exit 1
          fi
          
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if it's a prerelease
          if [[ $TAG =~ -[a-zA-Z] ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "📝 Prerelease detected: $TAG"
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "📝 Stable release: $TAG"
          fi

      - name: Check if version is greater than latest
        run: |
          # Get latest released version
          LATEST=$(git tag -l "v*.*.*" | grep -v "-" | sort -V | tail -n1)
          CURRENT=${GITHUB_REF#refs/tags/}
          
          echo "Latest released: $LATEST"
          echo "Current tag: $CURRENT"
          
          if [[ -n $LATEST ]] && [[ $(echo -e "$LATEST\n$CURRENT" | sort -V | tail -n1) != $CURRENT ]]; then
            echo "❌ Version $CURRENT is not greater than latest $LATEST"
            exit 1
          fi
          
          echo "✅ Version validation passed"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ needs.validate-release.outputs.version }}
          path: coverage.html

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [validate-release, test]
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Build binary
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          VERSION=${{ needs.validate-release.outputs.version }}
          BINARY_NAME="chronos-kubernetes-scheduler"
          
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          mkdir -p dist
          
          go build -ldflags="-w -s -X main.version=$VERSION" \
            -o "dist/${BINARY_NAME}" \
            ./cmd/scheduler
          
          # Create archive
          cd dist
          if [ "${{ matrix.os }}" = "windows" ]; then
            zip "../chronos-scheduler-$VERSION-${{ matrix.os }}-${{ matrix.arch }}.zip" "${BINARY_NAME}"
          else
            tar -czf "../chronos-scheduler-$VERSION-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" "${BINARY_NAME}"
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ matrix.arch }}
          path: chronos-scheduler-${{ needs.validate-release.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.*

  build-and-push-image:
    name: Build & Push Container Image
    runs-on: ubuntu-latest
    needs: [validate-release, test]
    permissions:
      contents: read
      packages: write
      id-token: write  # For cosign
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable={{is_default_branch}}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0.15.10
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ needs.validate-release.outputs.version }}
          path: sbom.spdx.json

  package-helm-chart:
    name: Package Helm Chart
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-push-image]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Update Chart version
        run: |
          VERSION=${{ needs.validate-release.outputs.version }}
          
          # Update Chart.yaml with new version
          sed -i "s/^version:.*/version: $VERSION/" charts/chronos-kubernetes-scheduler/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"v$VERSION\"/" charts/chronos-kubernetes-scheduler/Chart.yaml
          
          # Update default image tag in values.yaml
          sed -i "s/tag: .*/tag: \"v$VERSION\"/" charts/chronos-kubernetes-scheduler/values.yaml

      - name: Package Helm chart
        run: |
          helm package charts/chronos-kubernetes-scheduler --destination ./helm-releases

      - name: Upload Helm chart
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-${{ needs.validate-release.outputs.version }}
          path: helm-releases/*.tgz

  generate-manifests:
    name: Generate Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: [validate-release, package-helm-chart]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Download Helm chart
        uses: actions/download-artifact@v4
        with:
          name: helm-chart-${{ needs.validate-release.outputs.version }}
          path: ./helm-releases

      - name: Generate manifests
        run: |
          VERSION=${{ needs.validate-release.outputs.version }}
          
          mkdir -p manifests
          
          # Generate manifests for different configurations
          configs=("default" "high-availability" "minimal")
          
          for config in "${configs[@]}"; do
            case $config in
              "high-availability")
                values_args="--set replicaCount=3 --set affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[0].weight=100"
                ;;
              "minimal")
                values_args="--set resources.requests.cpu=25m --set resources.requests.memory=32Mi --set resources.limits.cpu=100m --set resources.limits.memory=128Mi"
                ;;
              *)
                values_args=""
                ;;
            esac
            
            helm template chronos-scheduler ./helm-releases/chronos-kubernetes-scheduler-${VERSION}.tgz \
              --namespace chronos-system \
              $values_args \
              > manifests/chronos-scheduler-${config}.yaml
              
            echo "Generated manifests/chronos-scheduler-${config}.yaml"
          done

      - name: Upload manifests
        uses: actions/upload-artifact@v4
        with:
          name: kubernetes-manifests-${{ needs.validate-release.outputs.version }}
          path: manifests/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-push-image]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.validate-release.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test, build-binaries, build-and-push-image, package-helm-chart, generate-manifests, security-scan]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION=${{ needs.validate-release.outputs.version }}
          
          # Get previous tag for changelog
          PREVIOUS_TAG=$(git tag -l "v*.*.*" | grep -v "-" | sort -V | tail -n2 | head -n1)
          CURRENT_TAG="v$VERSION"
          
          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
          
          cat > release-notes.md << 'EOF'
          ## 🚀 What's Changed
          
          ### 📋 Summary
          This release includes improvements to the Chronos Kubernetes Scheduler.
          
          ### 🔧 Changes
          EOF
          
          # Add commit log
          if [[ -n $PREVIOUS_TAG ]]; then
            echo "" >> release-notes.md
            echo "### 📝 Commits" >> release-notes.md
            git log --oneline --no-merges $PREVIOUS_TAG..$CURRENT_TAG >> release-notes.md || echo "No commits found" >> release-notes.md
          fi
          
          # Add artifact information
          cat >> release-notes.md << 'EOF'
          
          ### 📦 Artifacts
          
          #### 🐳 Container Images
          ```bash
          docker pull ghcr.io/${{ github.repository }}:v${{ needs.validate-release.outputs.version }}
          ```
          
          #### ⎈ Kubernetes Installation
          ```bash
          # Using Helm
          helm repo add chronos https://github.com/${{ github.repository }}/releases/download/v${{ needs.validate-release.outputs.version }}
          helm install chronos chronos/chronos-kubernetes-scheduler
          
          # Using kubectl
          kubectl apply -f https://github.com/${{ github.repository }}/releases/download/v${{ needs.validate-release.outputs.version }}/chronos-scheduler-default.yaml
          ```
          
          #### 📱 Binary Downloads
          Download the appropriate binary for your platform from the release assets below.
          
          ### 🔒 Security
          - Container images are signed with cosign
          - SBOM (Software Bill of Materials) included
          - Vulnerability scan results available
          
          ### 🆕 Full Changelog
          See all changes: [$PREVIOUS_TAG...v$VERSION](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...v$VERSION)
          EOF

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy binaries
          find ./artifacts -name "binary-*" -type d | while read dir; do
            find "$dir" -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-assets/ \;
          done
          
          # Copy Helm chart
          find ./artifacts -name "helm-chart-*" -type d | while read dir; do
            find "$dir" -name "*.tgz" -exec cp {} release-assets/ \;
          done
          
          # Copy manifests
          find ./artifacts -name "kubernetes-manifests-*" -type d | while read dir; do
            find "$dir" -name "*.yaml" -exec cp {} release-assets/ \;
          done
          
          # Copy SBOM
          find ./artifacts -name "sbom-*" -type d | while read dir; do
            find "$dir" -name "*.json" -exec cp {} release-assets/ \;
          done
          
          ls -la release-assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release v${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
          files: release-assets/*
          generate_release_notes: false
          make_latest: ${{ needs.validate-release.outputs.is-prerelease == 'false' }}

  update-helm-index:
    name: Update Helm Repository
    runs-on: ubuntu-latest
    needs: [create-release]
    if: needs.validate-release.outputs.is-prerelease == 'false'
    steps:
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Download Helm chart
        uses: actions/download-artifact@v4
        with:
          name: helm-chart-${{ needs.validate-release.outputs.version }}
          path: ./charts

      - name: Update Helm repository index
        run: |
          # Create charts directory if it doesn't exist
          mkdir -p charts
          
          # Copy new chart
          cp ./charts/*.tgz ./charts/
          
          # Generate/update index
          helm repo index ./charts --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/charts
          
          # Commit and push
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add charts/
          git commit -m "Update Helm repository index for v${{ needs.validate-release.outputs.version }}" || echo "No changes to commit"
          git push origin gh-pages
